import pygame
import random
import math
# Initialize Pygame
pygame.init()
# Set up the display
WIDTH = 800
HEIGHT = 400
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("10K Steps Challenge")
# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
# Player properties
player_width = 40
player_height = 60
player_x = 50
player_y = HEIGHT - player_height - 10
player_speed = 5
jumping = False
jump_count = 10
is_floating = False
original_y = HEIGHT - player_height - 10
MAX_FLOAT_HEIGHT = 100
FLOAT_SPEED = 5
FALL_SPEED = 5
# Add colors for player
SKIN_COLOR = (255, 198, 140)
SHIRT_COLOR = (30, 144, 255)  # Blue shirt
PANTS_COLOR = (0, 0, 139)     # Dark blue pants
# Game properties
steps = 0
obstacles = []
game_speed = 4
target_steps = 10000
ground_obstacles = []
GROUND_OBSTACLE_MIN_SPACING = 150
LAST_GROUND_OBSTACLE_X = WIDTH
# Add these colors after the existing colors
SKY_BLUE = (135, 206, 235)
GRASS_GREEN = (34, 139, 34)
TREE_GREEN = (46, 139, 87)
TREE_BROWN = (139, 69, 19)
SUN_YELLOW = (255, 255, 0)
CLOUD_WHITE = (240, 240, 240)
BURGER_BROWN = (139, 69, 19)    # Bun color
BURGER_DARK = (110, 44, 0)      # Patty color
LETTUCE_GREEN = (58, 185, 52)   # Lettuce color
TOMATO_RED = (255, 99, 71)      # Tomato color
# Add these colors for milkshake
CREAM_WHITE = (255, 250, 250)
PINK = (255, 182, 193)
STRAW_RED = (255, 0, 0)
GLASS_BLUE = (173, 216, 230, 128)  # Light blue with some transparency
# Add this class for clouds
class Cloud:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.speed = 0.5
    def move(self):
        self.x -= self.speed
        if self.x < -100:
            self.x = WIDTH + 100
    def draw(self):
        pygame.draw.ellipse(screen, CLOUD_WHITE, (self.x, self.y, 100, 40))
        pygame.draw.ellipse(screen, CLOUD_WHITE, (self.x + 20, self.y - 10, 70, 40))
        pygame.draw.ellipse(screen, CLOUD_WHITE, (self.x + 40, self.y + 10, 70, 40))
# After pygame.init(), add:
# Create clouds
clouds = [
    Cloud(random.randint(0, WIDTH), random.randint(50, 150))
    for _ in range(3)
]
# Add these colors after the existing colors
BUN_BROWN = (205, 133, 63)      # Lighter bun color
BUN_SHADOW = (139, 69, 19)      # Darker bun color
PATTY_BROWN = (110, 44, 0)      # Meat patty color
PATTY_DARK = (80, 30, 0)        # Darker meat areas
LETTUCE_GREEN = (58, 185, 52)   # Lettuce color
LETTUCE_LIGHT = (144, 238, 144) # Light lettuce
TOMATO_RED = (255, 99, 71)      # Tomato color
CHEESE_YELLOW = (255, 191, 0)   # Cheese color
SESAME_COLOR = (255, 236, 189)  # Sesame seeds
class Obstacle:
    def __init__(self, x, y, width, height):
        self.rect = pygame.Rect(x, y, width, height)
        self.width = width
        # Reduce number of sesame seeds for smaller bun
        self.sesame_positions = [(random.randint(0, width-3), random.randint(0, 5)) 
                                for _ in range(3)]  # Reduced from 5
        
    def move(self):
        self.rect.x -= game_speed
        
    def draw(self):
        x, y = self.rect.x, self.rect.y
        w = self.rect.width
        
        # Top bun (more rounded)
        pygame.draw.ellipse(screen, BUN_BROWN, 
                          (x - 2, y, w + 4, 15))  # Height reduced from 25
        # Top bun shadow
        pygame.draw.ellipse(screen, BUN_SHADOW,
                          (x - 2, y + 12, w + 4, 5))  # Y and height adjusted
        
        # Sesame seeds (smaller)
        for seed_x, seed_y in self.sesame_positions:
            pygame.draw.ellipse(screen, SESAME_COLOR,
                              (x + seed_x, y + seed_y, 3, 2))  # Size reduced
        
        # Cheese
        pygame.draw.rect(screen, CHEESE_YELLOW,
                        (x - 3, y + 15, w + 6, 4))  # Y and height adjusted
        # Cheese drip
        pygame.draw.polygon(screen, CHEESE_YELLOW, [
            (x + w//3, y + 19),
            (x + w//3 + 4, y + 22),
            (x + w//3 - 2, y + 22)
        ])
        
        # Patty
        pygame.draw.rect(screen, PATTY_BROWN,
                        (x - 2, y + 19, w + 4, 8))  # Y and height adjusted
        # Patty texture
        for _ in range(3):  # Reduced spots
            spot_x = x + random.randint(0, w)
            pygame.draw.circle(screen, PATTY_DARK,
                             (spot_x, y + 23), 1)  # Smaller spots
        
        # Lettuce (wavy effect)
        for i in range(2):  # Reduced layers
            offset = math.sin(i * 0.8) * 2
            pygame.draw.rect(screen, LETTUCE_GREEN,
                           (x - 4 + offset, y + 27 + i * 2, w + 8, 2))
            pygame.draw.rect(screen, LETTUCE_LIGHT,
                           (x - 4 + offset, y + 28 + i * 2, w + 8, 1))
        
        # Tomato
        pygame.draw.rect(screen, TOMATO_RED,
                        (x - 1, y + 32, w + 2, 4))
        pygame.draw.line(screen, (255, 150, 150),
                        (x, y + 33), (x + w, y + 33), 1)
        
        # Bottom bun
        pygame.draw.rect(screen, BUN_BROWN,
                        (x - 2, y + 36, w + 4, 7),
                        border_radius=3)
        # Bottom bun shadow
        pygame.draw.rect(screen, BUN_SHADOW,
                        (x - 2, y + 40, w + 4, 3),
                        border_radius=2)
class Milkshake:
    def __init__(self, x, y, width, height):
        self.rect = pygame.Rect(x, y, width, height)
        self.width = width
        self.whipped_cream_points = []
        # Generate random "bumps" for whipped cream
        for i in range(5):
            x_offset = (i * (width/4))
            y_offset = random.randint(-3, 3)
            self.whipped_cream_points.append((x_offset, y_offset))
    
    def move(self):
        self.rect.x -= game_speed
        
    def draw(self):
        x, y = self.rect.x, self.rect.y
        w = self.rect.width
        h = self.rect.height
        
        # Glass
        pygame.draw.polygon(screen, GLASS_BLUE, [
            (x, y + h),           # bottom left
            (x + w, y + h),       # bottom right
            (x + w - 4, y + 10),  # top right
            (x + 4, y + 10)       # top left
        ])
        
        # Milkshake liquid (pink)
        pygame.draw.polygon(screen, PINK, [
            (x + 2, y + h - 2),
            (x + w - 2, y + h - 2),
            (x + w - 5, y + 15),
            (x + 5, y + 15)
        ])
        
        # Whipped cream top
        cream_points = [(x + p[0], y + 10 + p[1]) for p in self.whipped_cream_points]
        cream_points = [(x + 4, y + 10)] + cream_points + [(x + w - 4, y + 10)]
        pygame.draw.polygon(screen, CREAM_WHITE, cream_points)
        
        # Straw
        straw_x = x + w//2
        pygame.draw.rect(screen, STRAW_RED, 
                        (straw_x - 2, y - 10, 4, h - 5))
        # Straw bend
        pygame.draw.arc(screen, STRAW_RED,
                       (straw_x - 6, y - 20, 12, 12),
                       0, 3.14, 3)
        pygame.draw.rect(screen, STRAW_RED,
                        (straw_x + 4, y - 20, 10, 4))
# Add these colors for collectables
METAL_GRAY = (169, 169, 169)
METAL_DARK = (128, 128, 128)
HANDLE_BLACK = (40, 40, 40)
class Collectable:
    def __init__(self, x, y, type='dumbbell'):
        self.rect = pygame.Rect(x, y, 20, 20)
        self.type = type
        self.collected = False
        
    def draw(self):
        if self.collected:
            return
            
        x, y = self.rect.x, self.rect.y
        
        if self.type == 'dumbbell':
            # Left weight
            pygame.draw.circle(screen, METAL_GRAY, (x + 5, y + 10), 5)
            pygame.draw.circle(screen, METAL_DARK, (x + 5, y + 10), 5, 1)
            
            # Handle
            pygame.draw.rect(screen, HANDLE_BLACK, (x + 5, y + 8, 10, 4))
            
            # Right weight
            pygame.draw.circle(screen, METAL_GRAY, (x + 15, y + 10), 5)
            pygame.draw.circle(screen, METAL_DARK, (x + 15, y + 10), 5, 1)
            
        else:  # kettlebell
            # Handle
            pygame.draw.rect(screen, HANDLE_BLACK, (x + 6, y + 2, 8, 5))
            
            # Bell body
            pygame.draw.circle(screen, METAL_GRAY, (x + 10, y + 12), 8)
            pygame.draw.circle(screen, METAL_DARK, (x + 10, y + 12), 8, 1)
# Add these variables near the top with other game properties
collectables = []
collected_count = 0  # Counter for collected items
COLLECTABLE_SCORE = 100
LAST_COLLECTABLE_X = WIDTH
MIN_COLLECTABLE_SPACING = 300
# Add this font setup with other pygame initializations
FONT = pygame.font.Font(None, 36)
def spawn_collectable():
    global LAST_COLLECTABLE_X
    
    if WIDTH - LAST_COLLECTABLE_X < MIN_COLLECTABLE_SPACING:
        return
        
    collectable_type = random.choice(['dumbbell', 'kettlebell'])
    y_position = random.choice([HEIGHT - 60, HEIGHT - 120, HEIGHT - 180])
    
    collectable = Collectable(WIDTH, y_position, collectable_type)
    collectables.append(collectable)
    LAST_COLLECTABLE_X = WIDTH
# Add this function before the game loop
def draw_hud():
    # Draw steps counter
    steps_text = FONT.render(f'Steps: {steps}/{target_steps}', True, BLACK)
    screen.blit(steps_text, (10, 10))
    
    # Draw collected items counter
    collected_text = FONT.render(f'Items: {collected_count}', True, BLACK)
    screen.blit(collected_text, (10, 50))
# Game loop
running = True
clock = pygame.time.Clock()
# Add these variables near the top with other game properties
MIN_OBSTACLE_SPACING = 200  # Reduced from 300
LAST_OBSTACLE_X = WIDTH    # Track the last obstacle's position
GROUND_Y = HEIGHT - 10     # Ground level
AIR_Y_POSITIONS = [HEIGHT - 120, HEIGHT - 180]  # Different height levels for flying obstacles
def spawn_obstacle():
    global LAST_OBSTACLE_X
    
    if WIDTH - LAST_OBSTACLE_X < MIN_OBSTACLE_SPACING:
        return
    
    # Randomly choose between burger and milkshake
    obstacle_type = random.choice(['burger', 'milkshake'])
    y_position = random.choice([GROUND_Y] + AIR_Y_POSITIONS)
    
    if obstacle_type == 'burger':  # This creates the burger obstacle
        width = 30
        height = 45
        obstacle = Obstacle(WIDTH, y_position - height, width, height)
    else:  # milkshake
        width = 25
        height = 40
        obstacle = Milkshake(WIDTH, y_position - height, width, height)
    
    obstacles.append(obstacle)
    LAST_OBSTACLE_X = WIDTH
# Add these colors near other color definitions
ROCK_GRAY = (128, 128, 128)
ROCK_DARK = (105, 105, 105)
SPIKE_SILVER = (192, 192, 192)
# Add this new class after other obstacle classes
class GroundObstacle:
    def __init__(self, x, type='rock'):
        self.type = type
        if type == 'rock':
            self.width = random.randint(15, 25)
            self.height = random.randint(15, 20)
        else:  # spike
            self.width = 12
            self.height = 20
        
        self.rect = pygame.Rect(x, HEIGHT - self.height - 10, self.width, self.height)
    
    def move(self):
        self.rect.x -= game_speed
    
    def draw(self):
        if self.type == 'rock':
            # Main rock body
            pygame.draw.polygon(screen, ROCK_GRAY, [
                (self.rect.x, self.rect.bottom),
                (self.rect.x + self.width//2, self.rect.top),
                (self.rect.right, self.rect.bottom)
            ])
            # Rock details
            pygame.draw.line(screen, ROCK_DARK,
                           (self.rect.x + 3, self.rect.bottom - 5),
                           (self.rect.x + self.width - 3, self.rect.bottom - 5), 2)
        else:  # spike
            # Spike triangle
            pygame.draw.polygon(screen, SPIKE_SILVER, [
                (self.rect.x, self.rect.bottom),
                (self.rect.x + self.width//2, self.rect.top),
                (self.rect.right, self.rect.bottom)
            ])
            # Metallic shine
            pygame.draw.line(screen, WHITE,
                           (self.rect.x + 2, self.rect.bottom - 5),
                           (self.rect.x + self.width//2, self.rect.top + 5), 1)
# Add this function with other spawn functions
def spawn_ground_obstacle():
    global LAST_GROUND_OBSTACLE_X
    
    if WIDTH - LAST_GROUND_OBSTACLE_X < GROUND_OBSTACLE_MIN_SPACING:
        return
        
    obstacle_type = random.choice(['rock', 'spike'])
    obstacle = GroundObstacle(WIDTH, obstacle_type)
    ground_obstacles.append(obstacle)
    LAST_GROUND_OBSTACLE_X = WIDTH
# Main game loop
while running:
    clock.tick(60)
    
    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        
        # Handle key release
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_SPACE:
                is_floating = False
    # Handle continuous key press
    keys = pygame.key.get_pressed()
    
    # Floating mechanics
    if keys[pygame.K_SPACE]:
        is_floating = True
        # Move player up if below max height
        if player_y > original_y - MAX_FLOAT_HEIGHT:
            player_y -= FLOAT_SPEED
    
    # Falling mechanics
    if not is_floating:
        # Move player down if above ground
        if player_y < original_y:
            player_y += FALL_SPEED
        else:
            player_y = original_y  # Ensure player doesn't go below ground
    # Player movement
    keys = pygame.key.get_pressed()
    if keys[pygame.K_RIGHT]:
        player_x += player_speed
        steps += 1
    if keys[pygame.K_LEFT]:
        player_x -= player_speed
    # Spawn obstacles with controlled timing
    if random.randint(1, 70) == 1:  # Increased from 90
        spawn_obstacle()
    
    # Spawn collectables less frequently than obstacles
    if random.randint(1, 60) == 1:  # More frequent spawning (about 2.5x more common)
        spawn_collectable()
    
    # Spawn ground obstacles
    if random.randint(1, 80) == 1:
        spawn_ground_obstacle()
    
    # Update collectables
    for collectable in collectables[:]:
        collectable.rect.x -= game_speed
        
        # Check collision with player
        player_rect = pygame.Rect(player_x, player_y, player_width, player_height)
        if not collectable.collected and player_rect.colliderect(collectable.rect):
            steps += COLLECTABLE_SCORE
            collected_count += 1  # Increment counter
            collectable.collected = True
            # Optional: Add collection sound effect here
        
        # Remove off-screen collectables
        if collectable.rect.right < 0:
            collectables.remove(collectable)
    
    # Update LAST_COLLECTABLE_X
    if collectables:
        LAST_COLLECTABLE_X = max(collectable.rect.x for collectable in collectables)
    else:
        LAST_COLLECTABLE_X = 0
    
    # Update obstacles
    for obstacle in obstacles[:]:
        obstacle.move()
        
        # Check collision
        player_rect = pygame.Rect(player_x, player_y, player_width, player_height)
        if player_rect.colliderect(obstacle.rect):
            running = False
            print("Game Over! Steps taken:", steps)
        
        # Remove obstacles that are off screen
        if obstacle.rect.right < 0:
            obstacles.remove(obstacle)
    
    # Update ground obstacles
    for obstacle in ground_obstacles[:]:
        obstacle.move()
        
        # Check collision with player
        player_rect = pygame.Rect(player_x, player_y, player_width, player_height)
        if player_rect.colliderect(obstacle.rect):
            running = False
            print("Game Over! Hit a ground obstacle! Steps taken:", steps)
        
        # Remove off-screen obstacles
        if obstacle.rect.right < 0:
            ground_obstacles.remove(obstacle)
    # Check win condition
    if steps >= target_steps:
        print("Congratulations! You won!")
        running = False
    # Draw everything
    screen.fill(SKY_BLUE)
    
    # Draw sun
    pygame.draw.circle(screen, SUN_YELLOW, (50, 50), 30)
    
    # Update and draw clouds
    for cloud in clouds:
        cloud.move()
        cloud.draw()
    
    # Draw trees (multiple trees at different positions)
    def draw_tree(x, y):
        # Tree trunk
        pygame.draw.rect(screen, TREE_BROWN, (x, y - 60, 20, 60))
        # Tree leaves (multiple circles for fuller appearance)
        pygame.draw.circle(screen, TREE_GREEN, (x + 10, y - 70), 25)
        pygame.draw.circle(screen, TREE_GREEN, (x - 5, y - 85), 20)
        pygame.draw.circle(screen, TREE_GREEN, (x + 25, y - 85), 20)
        pygame.draw.circle(screen, TREE_GREEN, (x + 10, y - 100), 20)
    
    # Draw multiple trees
    tree_positions = [(100, HEIGHT), (300, HEIGHT), (500, HEIGHT), (700, HEIGHT)]
    for x, y in tree_positions:
        draw_tree(x, y)
    
    # Draw grass (ground)
    pygame.draw.rect(screen, GRASS_GREEN, (0, HEIGHT - 20, WIDTH, 20))
    
    # Add some small details like flowers or bushes
    def draw_bush(x, y):
        pygame.draw.circle(screen, TREE_GREEN, (x, y), 15)
        pygame.draw.circle(screen, TREE_GREEN, (x + 10, y), 15)
        pygame.draw.circle(screen, TREE_GREEN, (x + 5, y - 10), 15)
    
    # Draw bushes at various positions
    bush_positions = [(150, HEIGHT - 20), (400, HEIGHT - 20), (600, HEIGHT - 20)]
    for x, y in bush_positions:
        draw_bush(x, y)
    # Draw the player
    # Body parts
    head_radius = 10
    head_pos = (player_x + player_width//2, player_y + head_radius)
    
    # Draw clothes
    # Shirt (torso)
    shirt_rect = pygame.Rect(player_x + 10, player_y + head_radius*2, 
                           player_width - 20, player_height - 35)
    pygame.draw.rect(screen, SHIRT_COLOR, shirt_rect)
    
    # Pants
    pants_rect = pygame.Rect(player_x + 10, player_y + player_height - 25,
                           player_width - 20, 25)
    pygame.draw.rect(screen, PANTS_COLOR, pants_rect)
    
    # Arms
    pygame.draw.line(screen, SHIRT_COLOR, 
                    (player_x + 10, player_y + head_radius*2 + 15),
                    (player_x, player_y + player_height - 20), 3)
    pygame.draw.line(screen, SHIRT_COLOR,
                    (player_x + player_width - 10, player_y + head_radius*2 + 15),
                    (player_x + player_width, player_y + player_height - 20), 3)
    
    # Legs
    pygame.draw.line(screen, PANTS_COLOR,
                    (player_x + 15, player_y + player_height),
                    (player_x + 15, player_y + player_height + 10), 3)
    pygame.draw.line(screen, PANTS_COLOR,
                    (player_x + player_width - 15, player_y + player_height),
                    (player_x + player_width - 15, player_y + player_height + 10), 3)
    
    # Head
    pygame.draw.circle(screen, SKIN_COLOR, head_pos, head_radius)
    
    # Face features
    eye_color = BLACK
    # Left eye
    pygame.draw.circle(screen, eye_color, 
                      (head_pos[0] - 4, head_pos[1] - 2), 2)
    # Right eye
    pygame.draw.circle(screen, eye_color,
                      (head_pos[0] + 4, head_pos[1] - 2), 2)
    # Smile
    pygame.draw.arc(screen, eye_color,
                   (head_pos[0] - 5, head_pos[1] - 3, 10, 6),
                   0, 3.14, 1)
    
    # Draw obstacles and rest of the game
    for obstacle in obstacles:
        obstacle.draw()
    
    # Draw collectables
    for collectable in collectables:
        collectable.draw()
    
    # Draw ground obstacles
    for obstacle in ground_obstacles:
        obstacle.draw()
    
    # Draw HUD (add this after all other drawing)
    draw_hud()
    
    pygame.display.flip()
pygame.quit()
